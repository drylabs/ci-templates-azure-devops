parameters:
  - name: TerraformVersion
    displayName: Inform Terraform Version
    type: string
    default: "1.3.9"

  - name: runTFsec
    displayName: Run Terrafom TFsec?
    type: boolean
    default: false

  - name: runCheckChanges
    displayName: Run Terrafom CheckChanges?
    type: boolean
    default: false

steps:
  - task: TerraformInstaller@0
    displayName: "install"
    inputs:
      terraformVersion: ${{ parameters.TerraformVersion }}

  - bash: |
      terraform fmt
    workingDirectory: $(TF-Path)
    displayName: "Terraform Format"
# TODO: remover ARM_ACCESS_KEY. Afinal, a autenticação utiliza service principal
  - bash: |
      terraform -v
      terraform init \
        --input=false \
        -backend-config="resource_group_name=$(TF-BACKEND-RESOURCEGROUP)" \
        -backend-config="storage_account_name=$(TF-BACKEND-STGNAME)" \
        -backend-config="container_name=$(TF-BACKEND-STGCONTAINER)" \
        -backend-config="key=$(TF-BACKEND-STGKEY)"
    workingDirectory: $(TF-Path)
    env:
      TF_IN_AUTOMATION: $(tf_in_automation)
      ARM_ACCESS_KEY: $(stg-terraform-access-key)
      ARM_CLIENT_ID: $(tf-client-id)
      ARM_CLIENT_SECRET: $(tf-client-secret)
      ARM_SUBSCRIPTION_ID: $(tf-subscription-id)
      ARM_TENANT_ID: $(tf-tenant-id)
      TF_VAR_cloudflare_api_token: $(cloudflare-api-token)
      TF_VAR_cloudflare_email: $(cloudflare-email)
    displayName: "Terraform Init"

  - bash: |
      terraform plan --input=false --out=stage.tfplan
    workingDirectory: $(TF-Path)
    env:
      ARM_ACCESS_KEY: $(stg-terraform-access-key)
      ARM_CLIENT_ID: $(tf-client-id)
      ARM_CLIENT_SECRET: $(tf-client-secret)
      ARM_SUBSCRIPTION_ID: $(tf-subscription-id)
      ARM_TENANT_ID: $(tf-tenant-id)
      TF_VAR_cloudflare_api_token: $(cloudflare-api-token)
      TF_VAR_cloudflare_email: $(cloudflare-email)
    displayName: "Terraform Plan"

  - bash: |
      terraform show -json stage.tfplan > stage.json
      jq '.resource_changes[] | select(.change.actions[] == "delete").address' stage.json
    workingDirectory: $(TF-Path)
    displayName: "Check Resources to Destroy"

  - ${{ if eq(parameters.runCheckChanges, true) }}:
      - bash: |
          docker run -v $PWD:/workspace -w /workspace ghcr.io/dineshba/tf-summarize stage.tfplan
        workingDirectory: $(TF-Path)
        continueOnError: true
        displayName: "Terraform Check Changes"

  - ${{ if eq(parameters.runTFsec, true) }}:
      - bash: |
          docker run --rm -v $PWD:/app -w /app tfsec/tfsec .
        workingDirectory: $(TF-Path)
        continueOnError: true
        displayName: "Validação TFsec"

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: $(TF-Path) #'$(Build.SourcesDirectory)'
      includeRootFolder: false
      archiveType: "tar"
      tarCompression: "gz"
      archiveFile: "$(BUILD_ARTIFACTSTAGINGDIRECTORY)/$(Build.BuildId).tgz"
      replaceExistingArchive: true
    displayName: "Create Plan Artifact"

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: "$(BUILD_ARTIFACTSTAGINGDIRECTORY)"
      ArtifactName: "drop"
      publishLocation: "Container"
    displayName: "Publish Plan Artifact"
